// Generated by gencpp from file image_recognition_msgs/CategoricalDistribution.msg
// DO NOT EDIT!


#ifndef IMAGE_RECOGNITION_MSGS_MESSAGE_CATEGORICALDISTRIBUTION_H
#define IMAGE_RECOGNITION_MSGS_MESSAGE_CATEGORICALDISTRIBUTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <image_recognition_msgs/CategoryProbability.h>

namespace image_recognition_msgs
{
template <class ContainerAllocator>
struct CategoricalDistribution_
{
  typedef CategoricalDistribution_<ContainerAllocator> Type;

  CategoricalDistribution_()
    : probabilities()
    , unknown_probability(0.0)  {
    }
  CategoricalDistribution_(const ContainerAllocator& _alloc)
    : probabilities(_alloc)
    , unknown_probability(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >::other >  _probabilities_type;
  _probabilities_type probabilities;

   typedef float _unknown_probability_type;
  _unknown_probability_type unknown_probability;




  typedef boost::shared_ptr< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> const> ConstPtr;

}; // struct CategoricalDistribution_

typedef ::image_recognition_msgs::CategoricalDistribution_<std::allocator<void> > CategoricalDistribution;

typedef boost::shared_ptr< ::image_recognition_msgs::CategoricalDistribution > CategoricalDistributionPtr;
typedef boost::shared_ptr< ::image_recognition_msgs::CategoricalDistribution const> CategoricalDistributionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_recognition_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'image_recognition_msgs': ['/home/nvidia/zuckbot_ws/src/image_recognition/image_recognition_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33d3c52e53151a3b74f712a5f80b67be";
  }

  static const char* value(const ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33d3c52e53151a3bULL;
  static const uint64_t static_value2 = 0x74f712a5f80b67beULL;
};

template<class ContainerAllocator>
struct DataType< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_recognition_msgs/CategoricalDistribution";
  }

  static const char* value(const ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Categorical distribution; if the probability of an element is below the unknown\n\
# probability, it can be classified as unknown\n\
CategoryProbability[] probabilities\n\
float32 unknown_probability\n\
\n\
================================================================================\n\
MSG: image_recognition_msgs/CategoryProbability\n\
# A category (label) with its probability (probability) that ranges from 0..1\n\
string  label\n\
float32 probability\n\
";
  }

  static const char* value(const ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.probabilities);
      stream.next(m.unknown_probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CategoricalDistribution_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_recognition_msgs::CategoricalDistribution_<ContainerAllocator>& v)
  {
    s << indent << "probabilities[]" << std::endl;
    for (size_t i = 0; i < v.probabilities.size(); ++i)
    {
      s << indent << "  probabilities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >::stream(s, indent + "    ", v.probabilities[i]);
    }
    s << indent << "unknown_probability: ";
    Printer<float>::stream(s, indent + "  ", v.unknown_probability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_RECOGNITION_MSGS_MESSAGE_CATEGORICALDISTRIBUTION_H
