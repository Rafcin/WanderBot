// Generated by gencpp from file image_recognition_msgs/Recognitions.msg
// DO NOT EDIT!


#ifndef IMAGE_RECOGNITION_MSGS_MESSAGE_RECOGNITIONS_H
#define IMAGE_RECOGNITION_MSGS_MESSAGE_RECOGNITIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <image_recognition_msgs/Recognition.h>

namespace image_recognition_msgs
{
template <class ContainerAllocator>
struct Recognitions_
{
  typedef Recognitions_<ContainerAllocator> Type;

  Recognitions_()
    : header()
    , recognitions()  {
    }
  Recognitions_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , recognitions(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::image_recognition_msgs::Recognition_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::image_recognition_msgs::Recognition_<ContainerAllocator> >::other >  _recognitions_type;
  _recognitions_type recognitions;




  typedef boost::shared_ptr< ::image_recognition_msgs::Recognitions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_recognition_msgs::Recognitions_<ContainerAllocator> const> ConstPtr;

}; // struct Recognitions_

typedef ::image_recognition_msgs::Recognitions_<std::allocator<void> > Recognitions;

typedef boost::shared_ptr< ::image_recognition_msgs::Recognitions > RecognitionsPtr;
typedef boost::shared_ptr< ::image_recognition_msgs::Recognitions const> RecognitionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_recognition_msgs::Recognitions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_recognition_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'image_recognition_msgs': ['/home/nvidia/zuckbot_ws/src/image_recognition/image_recognition_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::Recognitions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::Recognitions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::Recognitions_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ecb10adb1c61d004d2e3c9a37418093";
  }

  static const char* value(const ::image_recognition_msgs::Recognitions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ecb10adb1c61d00ULL;
  static const uint64_t static_value2 = 0x4d2e3c9a37418093ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_recognition_msgs/Recognitions";
  }

  static const char* value(const ::image_recognition_msgs::Recognitions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
Recognition[] recognitions\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: image_recognition_msgs/Recognition\n\
# A recognition in an image region of interest (roi) that is described by a\n\
# categorical distribution that contains of labels with their probabilities.\n\
# An optional group_id can be specified to group recognitions together\n\
\n\
CategoricalDistribution categorical_distribution\n\
sensor_msgs/RegionOfInterest roi\n\
uint32 group_id\n\
================================================================================\n\
MSG: image_recognition_msgs/CategoricalDistribution\n\
# Categorical distribution; if the probability of an element is below the unknown\n\
# probability, it can be classified as unknown\n\
CategoryProbability[] probabilities\n\
float32 unknown_probability\n\
\n\
================================================================================\n\
MSG: image_recognition_msgs/CategoryProbability\n\
# A category (label) with its probability (probability) that ranges from 0..1\n\
string  label\n\
float32 probability\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
";
  }

  static const char* value(const ::image_recognition_msgs::Recognitions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.recognitions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Recognitions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_recognition_msgs::Recognitions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_recognition_msgs::Recognitions_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "recognitions[]" << std::endl;
    for (size_t i = 0; i < v.recognitions.size(); ++i)
    {
      s << indent << "  recognitions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::image_recognition_msgs::Recognition_<ContainerAllocator> >::stream(s, indent + "    ", v.recognitions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_RECOGNITION_MSGS_MESSAGE_RECOGNITIONS_H
