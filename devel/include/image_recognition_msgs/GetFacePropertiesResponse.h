// Generated by gencpp from file image_recognition_msgs/GetFacePropertiesResponse.msg
// DO NOT EDIT!


#ifndef IMAGE_RECOGNITION_MSGS_MESSAGE_GETFACEPROPERTIESRESPONSE_H
#define IMAGE_RECOGNITION_MSGS_MESSAGE_GETFACEPROPERTIESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <image_recognition_msgs/FaceProperties.h>

namespace image_recognition_msgs
{
template <class ContainerAllocator>
struct GetFacePropertiesResponse_
{
  typedef GetFacePropertiesResponse_<ContainerAllocator> Type;

  GetFacePropertiesResponse_()
    : properties_array()  {
    }
  GetFacePropertiesResponse_(const ContainerAllocator& _alloc)
    : properties_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::image_recognition_msgs::FaceProperties_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::image_recognition_msgs::FaceProperties_<ContainerAllocator> >::other >  _properties_array_type;
  _properties_array_type properties_array;




  typedef boost::shared_ptr< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetFacePropertiesResponse_

typedef ::image_recognition_msgs::GetFacePropertiesResponse_<std::allocator<void> > GetFacePropertiesResponse;

typedef boost::shared_ptr< ::image_recognition_msgs::GetFacePropertiesResponse > GetFacePropertiesResponsePtr;
typedef boost::shared_ptr< ::image_recognition_msgs::GetFacePropertiesResponse const> GetFacePropertiesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_recognition_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'image_recognition_msgs': ['/home/nvidia/zuckbot_ws/src/image_recognition/image_recognition_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0520558de71d14fd1e03c6bfdd5c8935";
  }

  static const char* value(const ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0520558de71d14fdULL;
  static const uint64_t static_value2 = 0x1e03c6bfdd5c8935ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_recognition_msgs/GetFacePropertiesResponse";
  }

  static const char* value(const ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FaceProperties[] properties_array\n\
\n\
\n\
================================================================================\n\
MSG: image_recognition_msgs/FaceProperties\n\
# Face properties\n\
\n\
# Gender definitions\n\
uint8 MALE=0\n\
uint8 FEMALE=1\n\
\n\
# Gender, either MALE of FEMALE\n\
uint8 gender\n\
\n\
# The age of the face\n\
uint8 age\n\
";
  }

  static const char* value(const ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.properties_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetFacePropertiesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_recognition_msgs::GetFacePropertiesResponse_<ContainerAllocator>& v)
  {
    s << indent << "properties_array[]" << std::endl;
    for (size_t i = 0; i < v.properties_array.size(); ++i)
    {
      s << indent << "  properties_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::image_recognition_msgs::FaceProperties_<ContainerAllocator> >::stream(s, indent + "    ", v.properties_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_RECOGNITION_MSGS_MESSAGE_GETFACEPROPERTIESRESPONSE_H
