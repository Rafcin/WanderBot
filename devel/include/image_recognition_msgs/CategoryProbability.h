// Generated by gencpp from file image_recognition_msgs/CategoryProbability.msg
// DO NOT EDIT!


#ifndef IMAGE_RECOGNITION_MSGS_MESSAGE_CATEGORYPROBABILITY_H
#define IMAGE_RECOGNITION_MSGS_MESSAGE_CATEGORYPROBABILITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace image_recognition_msgs
{
template <class ContainerAllocator>
struct CategoryProbability_
{
  typedef CategoryProbability_<ContainerAllocator> Type;

  CategoryProbability_()
    : label()
    , probability(0.0)  {
    }
  CategoryProbability_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , probability(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef float _probability_type;
  _probability_type probability;




  typedef boost::shared_ptr< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> const> ConstPtr;

}; // struct CategoryProbability_

typedef ::image_recognition_msgs::CategoryProbability_<std::allocator<void> > CategoryProbability;

typedef boost::shared_ptr< ::image_recognition_msgs::CategoryProbability > CategoryProbabilityPtr;
typedef boost::shared_ptr< ::image_recognition_msgs::CategoryProbability const> CategoryProbabilityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_recognition_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'image_recognition_msgs': ['/home/nvidia/zuckbot_ws/src/image_recognition/image_recognition_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb7ef1e65c230d37e0b3ceae14668372";
  }

  static const char* value(const ::image_recognition_msgs::CategoryProbability_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb7ef1e65c230d37ULL;
  static const uint64_t static_value2 = 0xe0b3ceae14668372ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_recognition_msgs/CategoryProbability";
  }

  static const char* value(const ::image_recognition_msgs::CategoryProbability_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A category (label) with its probability (probability) that ranges from 0..1\n\
string  label\n\
float32 probability\n\
";
  }

  static const char* value(const ::image_recognition_msgs::CategoryProbability_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CategoryProbability_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_recognition_msgs::CategoryProbability_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_recognition_msgs::CategoryProbability_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_RECOGNITION_MSGS_MESSAGE_CATEGORYPROBABILITY_H
