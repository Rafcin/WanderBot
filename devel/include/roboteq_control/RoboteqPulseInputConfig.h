//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the roboteq_control package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __roboteq_control__ROBOTEQPULSEINPUTCONFIG_H__
#define __roboteq_control__ROBOTEQPULSEINPUTCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace roboteq_control
{
  class RoboteqPulseInputConfigStatics;
  
  class RoboteqPulseInputConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(RoboteqPulseInputConfig &config, const RoboteqPulseInputConfig &max, const RoboteqPulseInputConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const RoboteqPulseInputConfig &config1, const RoboteqPulseInputConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, RoboteqPulseInputConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const RoboteqPulseInputConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RoboteqPulseInputConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const RoboteqPulseInputConfig &config) const = 0;
      virtual void getValue(const RoboteqPulseInputConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T RoboteqPulseInputConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (RoboteqPulseInputConfig::* field);

      virtual void clamp(RoboteqPulseInputConfig &config, const RoboteqPulseInputConfig &max, const RoboteqPulseInputConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const RoboteqPulseInputConfig &config1, const RoboteqPulseInputConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, RoboteqPulseInputConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const RoboteqPulseInputConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RoboteqPulseInputConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const RoboteqPulseInputConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const RoboteqPulseInputConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, RoboteqPulseInputConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, RoboteqPulseInputConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<RoboteqPulseInputConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(RoboteqPulseInputConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("conversion"==(*_i)->name){conversion = boost::any_cast<int>(val);}
        if("input_use"==(*_i)->name){input_use = boost::any_cast<int>(val);}
        if("input_motor_one"==(*_i)->name){input_motor_one = boost::any_cast<int>(val);}
        if("input_motor_two"==(*_i)->name){input_motor_two = boost::any_cast<int>(val);}
        if("conversion_polarity"==(*_i)->name){conversion_polarity = boost::any_cast<int>(val);}
        if("input_deadband"==(*_i)->name){input_deadband = boost::any_cast<int>(val);}
        if("range_input_min"==(*_i)->name){range_input_min = boost::any_cast<double>(val);}
        if("range_input_max"==(*_i)->name){range_input_max = boost::any_cast<double>(val);}
        if("range_input_center"==(*_i)->name){range_input_center = boost::any_cast<double>(val);}
        if("load_roboteq"==(*_i)->name){load_roboteq = boost::any_cast<bool>(val);}
        if("restore_defaults"==(*_i)->name){restore_defaults = boost::any_cast<bool>(val);}
      }
    }

    int conversion;
int input_use;
int input_motor_one;
int input_motor_two;
int conversion_polarity;
int input_deadband;
double range_input_min;
double range_input_max;
double range_input_center;
bool load_roboteq;
bool restore_defaults;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int conversion;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int input_use;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int input_motor_one;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int input_motor_two;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int conversion_polarity;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int input_deadband;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double range_input_min;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double range_input_max;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double range_input_center;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool load_roboteq;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool restore_defaults;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("RoboteqPulseInputConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const RoboteqPulseInputConfig &__max__ = __getMax__();
      const RoboteqPulseInputConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const RoboteqPulseInputConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const RoboteqPulseInputConfig &__getDefault__();
    static const RoboteqPulseInputConfig &__getMax__();
    static const RoboteqPulseInputConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const RoboteqPulseInputConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void RoboteqPulseInputConfig::ParamDescription<std::string>::clamp(RoboteqPulseInputConfig &config, const RoboteqPulseInputConfig &max, const RoboteqPulseInputConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class RoboteqPulseInputConfigStatics
  {
    friend class RoboteqPulseInputConfig;
    
    RoboteqPulseInputConfigStatics()
    {
RoboteqPulseInputConfig::GroupDescription<RoboteqPulseInputConfig::DEFAULT, RoboteqPulseInputConfig> Default("Default", "", 0, 0, true, &RoboteqPulseInputConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.conversion = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.conversion = 4;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.conversion = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("conversion", "int", 0, "Type of pulse input conversion", "{'enum_description': 'Type of pulse input conversion', 'enum': [{'srcline': 12, 'description': 'Disable pulse input', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'conversion_disabled'}, {'srcline': 13, 'description': 'Enable in pulse with mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'pulse_with'}, {'srcline': 14, 'description': 'Enable in frequency mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'frequency'}, {'srcline': 15, 'description': 'Enable in duty cycle mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'duty_cycle'}, {'srcline': 16, 'description': 'Enable in magsensor mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'magsensor'}]}", &RoboteqPulseInputConfig::conversion)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("conversion", "int", 0, "Type of pulse input conversion", "{'enum_description': 'Type of pulse input conversion', 'enum': [{'srcline': 12, 'description': 'Disable pulse input', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'conversion_disabled'}, {'srcline': 13, 'description': 'Enable in pulse with mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'pulse_with'}, {'srcline': 14, 'description': 'Enable in frequency mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'frequency'}, {'srcline': 15, 'description': 'Enable in duty cycle mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'duty_cycle'}, {'srcline': 16, 'description': 'Enable in magsensor mode', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'magsensor'}]}", &RoboteqPulseInputConfig::conversion)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_use = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_use = 2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_use = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_use", "int", 0, "Configuration pulse input", "{'enum_description': 'configuration', 'enum': [{'srcline': 21, 'description': 'Disabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'input_disabled'}, {'srcline': 22, 'description': 'Motor command', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'motor_command'}, {'srcline': 23, 'description': 'Feedback', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'feedback'}]}", &RoboteqPulseInputConfig::input_use)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_use", "int", 0, "Configuration pulse input", "{'enum_description': 'configuration', 'enum': [{'srcline': 21, 'description': 'Disabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'input_disabled'}, {'srcline': 22, 'description': 'Motor command', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'motor_command'}, {'srcline': 23, 'description': 'Feedback', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'feedback'}]}", &RoboteqPulseInputConfig::input_use)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_motor_one = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_motor_one = 2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_motor_one = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_motor_one", "int", 0, "Configuration pulse input", "{'enum_description': 'Enable feedback from this motor', 'enum': [{'srcline': 26, 'description': 'Disabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'disabled'}, {'srcline': 27, 'description': 'enabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'enabled'}]}", &RoboteqPulseInputConfig::input_motor_one)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_motor_one", "int", 0, "Configuration pulse input", "{'enum_description': 'Enable feedback from this motor', 'enum': [{'srcline': 26, 'description': 'Disabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'disabled'}, {'srcline': 27, 'description': 'enabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'enabled'}]}", &RoboteqPulseInputConfig::input_motor_one)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_motor_two = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_motor_two = 2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_motor_two = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_motor_two", "int", 0, "Configuration pulse input", "{'enum_description': 'Enable feedback from this motor', 'enum': [{'srcline': 26, 'description': 'Disabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'disabled'}, {'srcline': 27, 'description': 'enabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'enabled'}]}", &RoboteqPulseInputConfig::input_motor_two)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_motor_two", "int", 0, "Configuration pulse input", "{'enum_description': 'Enable feedback from this motor', 'enum': [{'srcline': 26, 'description': 'Disabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'disabled'}, {'srcline': 27, 'description': 'enabled', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'enabled'}]}", &RoboteqPulseInputConfig::input_motor_two)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.conversion_polarity = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.conversion_polarity = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.conversion_polarity = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("conversion_polarity", "int", 0, "Conversion pulse input", "{'enum_description': 'Polarity conversion', 'enum': [{'srcline': 33, 'description': 'After gears', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'direct'}, {'srcline': 34, 'description': 'Before gears', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'inverse'}]}", &RoboteqPulseInputConfig::conversion_polarity)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("conversion_polarity", "int", 0, "Conversion pulse input", "{'enum_description': 'Polarity conversion', 'enum': [{'srcline': 33, 'description': 'After gears', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'direct'}, {'srcline': 34, 'description': 'Before gears', 'srcfile': '/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'inverse'}]}", &RoboteqPulseInputConfig::conversion_polarity)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_deadband = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_deadband = 50;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_deadband = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_deadband", "int", 0, "[%] How the movement near to zero is considered zero", "", &RoboteqPulseInputConfig::input_deadband)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<int>("input_deadband", "int", 0, "[%] How the movement near to zero is considered zero", "", &RoboteqPulseInputConfig::input_deadband)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.range_input_min = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.range_input_min = 65.536;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.range_input_min = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<double>("range_input_min", "double", 0, "[ms] Set the pulse input min", "", &RoboteqPulseInputConfig::range_input_min)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<double>("range_input_min", "double", 0, "[ms] Set the pulse input min", "", &RoboteqPulseInputConfig::range_input_min)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.range_input_max = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.range_input_max = 65.536;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.range_input_max = 2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<double>("range_input_max", "double", 0, "[ms] Set the pulse input max", "", &RoboteqPulseInputConfig::range_input_max)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<double>("range_input_max", "double", 0, "[ms] Set the pulse input max", "", &RoboteqPulseInputConfig::range_input_max)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.range_input_center = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.range_input_center = 65.536;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.range_input_center = 1.5;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<double>("range_input_center", "double", 0, "[ms] Set the pulse input center", "", &RoboteqPulseInputConfig::range_input_center)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<double>("range_input_center", "double", 0, "[ms] Set the pulse input center", "", &RoboteqPulseInputConfig::range_input_center)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.load_roboteq = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.load_roboteq = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.load_roboteq = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<bool>("load_roboteq", "bool", 0, "Load all parameters from Roboteq board", "", &RoboteqPulseInputConfig::load_roboteq)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<bool>("load_roboteq", "bool", 0, "Load all parameters from Roboteq board", "", &RoboteqPulseInputConfig::load_roboteq)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.restore_defaults = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.restore_defaults = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.restore_defaults = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<bool>("restore_defaults", "bool", 0, "Restore to the original configuration", "", &RoboteqPulseInputConfig::restore_defaults)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr(new RoboteqPulseInputConfig::ParamDescription<bool>("restore_defaults", "bool", 0, "Restore to the original configuration", "", &RoboteqPulseInputConfig::restore_defaults)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RoboteqPulseInputConfig::AbstractGroupDescriptionConstPtr(new RoboteqPulseInputConfig::GroupDescription<RoboteqPulseInputConfig::DEFAULT, RoboteqPulseInputConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<RoboteqPulseInputConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<RoboteqPulseInputConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    RoboteqPulseInputConfig __max__;
    RoboteqPulseInputConfig __min__;
    RoboteqPulseInputConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const RoboteqPulseInputConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static RoboteqPulseInputConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &RoboteqPulseInputConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const RoboteqPulseInputConfig &RoboteqPulseInputConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const RoboteqPulseInputConfig &RoboteqPulseInputConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const RoboteqPulseInputConfig &RoboteqPulseInputConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<RoboteqPulseInputConfig::AbstractParamDescriptionConstPtr> &RoboteqPulseInputConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<RoboteqPulseInputConfig::AbstractGroupDescriptionConstPtr> &RoboteqPulseInputConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const RoboteqPulseInputConfigStatics *RoboteqPulseInputConfig::__get_statics__()
  {
    const static RoboteqPulseInputConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = RoboteqPulseInputConfigStatics::get_instance();
    
    return statics;
  }

//#line 12 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_conversion_disabled = 0;
//#line 13 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_pulse_with = 1;
//#line 14 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_frequency = 2;
//#line 15 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_duty_cycle = 3;
//#line 16 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_magsensor = 4;
//#line 21 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_input_disabled = 0;
//#line 22 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_motor_command = 1;
//#line 23 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_feedback = 2;
//#line 26 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_disabled = 0;
//#line 27 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_enabled = 1;
//#line 33 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_direct = 0;
//#line 34 "/home/nvidia/zuckbot_ws/src/roboteq_control/cfg/RoboteqPulseInput.cfg"
      const int RoboteqPulseInput_inverse = 1;
}

#endif // __ROBOTEQPULSEINPUTRECONFIGURATOR_H__
