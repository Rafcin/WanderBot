// Generated by gencpp from file ros_ultrasonic_bumper/ultrasnd_bump_ranges.msg
// DO NOT EDIT!


#ifndef ROS_ULTRASONIC_BUMPER_MESSAGE_ULTRASND_BUMP_RANGES_H
#define ROS_ULTRASONIC_BUMPER_MESSAGE_ULTRASND_BUMP_RANGES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Range.h>
#include <sensor_msgs/Range.h>
#include <sensor_msgs/Range.h>
#include <sensor_msgs/Range.h>

namespace ros_ultrasonic_bumper
{
template <class ContainerAllocator>
struct ultrasnd_bump_ranges_
{
  typedef ultrasnd_bump_ranges_<ContainerAllocator> Type;

  ultrasnd_bump_ranges_()
    : sensor_FL()
    , sensor_FR()
    , sensor_RR()
    , sensor_RL()  {
    }
  ultrasnd_bump_ranges_(const ContainerAllocator& _alloc)
    : sensor_FL(_alloc)
    , sensor_FR(_alloc)
    , sensor_RR(_alloc)
    , sensor_RL(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _sensor_FL_type;
  _sensor_FL_type sensor_FL;

   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _sensor_FR_type;
  _sensor_FR_type sensor_FR;

   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _sensor_RR_type;
  _sensor_RR_type sensor_RR;

   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _sensor_RL_type;
  _sensor_RL_type sensor_RL;




  typedef boost::shared_ptr< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> const> ConstPtr;

}; // struct ultrasnd_bump_ranges_

typedef ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<std::allocator<void> > ultrasnd_bump_ranges;

typedef boost::shared_ptr< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges > ultrasnd_bump_rangesPtr;
typedef boost::shared_ptr< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges const> ultrasnd_bump_rangesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_ultrasonic_bumper

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_ultrasonic_bumper': ['/home/nvidia/zuckbot_ws/src/ros_ultrasonic_bumper/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae0bc0ffa95c0c13bd881b387004144e";
  }

  static const char* value(const ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae0bc0ffa95c0c13ULL;
  static const uint64_t static_value2 = 0xbd881b387004144eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_ultrasonic_bumper/ultrasnd_bump_ranges";
  }

  static const char* value(const ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Four Ultrasonic Range Sensors\n\
\n\
#      --- Front Lf ----------- Front Rg ---\n\
#      |                                   |\n\
#      |                                   |\n\
#      |                                   |\n\
#      --- Rear Lf ------------ Rear Rg ----\n\
\n\
# Front Right\n\
sensor_msgs/Range sensor_FL\n\
\n\
# Front Left\n\
sensor_msgs/Range sensor_FR\n\
\n\
# Rear Left\n\
sensor_msgs/Range sensor_RR\n\
\n\
# Rear Right\n\
sensor_msgs/Range sensor_RL\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Range\n\
# Single range reading from an active ranger that emits energy and reports\n\
# one range reading that is valid along an arc at the distance measured. \n\
# This message is  not appropriate for laser scanners. See the LaserScan\n\
# message if you are working with a laser scanner.\n\
\n\
# This message also can represent a fixed-distance (binary) ranger.  This\n\
# sensor will have min_range===max_range===distance of detection.\n\
# These sensors follow REP 117 and will output -Inf if the object is detected\n\
# and +Inf if the object is outside of the detection range.\n\
\n\
Header header           # timestamp in the header is the time the ranger\n\
                        # returned the distance reading\n\
\n\
# Radiation type enums\n\
# If you want a value added to this list, send an email to the ros-users list\n\
uint8 ULTRASOUND=0\n\
uint8 INFRARED=1\n\
\n\
uint8 radiation_type    # the type of radiation used by the sensor\n\
                        # (sound, IR, etc) [enum]\n\
\n\
float32 field_of_view   # the size of the arc that the distance reading is\n\
                        # valid for [rad]\n\
                        # the object causing the range reading may have\n\
                        # been anywhere within -field_of_view/2 and\n\
                        # field_of_view/2 at the measured range. \n\
                        # 0 angle corresponds to the x-axis of the sensor.\n\
\n\
float32 min_range       # minimum range value [m]\n\
float32 max_range       # maximum range value [m]\n\
                        # Fixed distance rangers require min_range==max_range\n\
\n\
float32 range           # range data [m]\n\
                        # (Note: values < range_min or > range_max\n\
                        # should be discarded)\n\
                        # Fixed distance rangers only output -Inf or +Inf.\n\
                        # -Inf represents a detection within fixed distance.\n\
                        # (Detection too close to the sensor to quantify)\n\
                        # +Inf represents no detection within the fixed distance.\n\
                        # (Object out of range)\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_FL);
      stream.next(m.sensor_FR);
      stream.next(m.sensor_RR);
      stream.next(m.sensor_RL);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ultrasnd_bump_ranges_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_ultrasonic_bumper::ultrasnd_bump_ranges_<ContainerAllocator>& v)
  {
    s << indent << "sensor_FL: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_FL);
    s << indent << "sensor_FR: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_FR);
    s << indent << "sensor_RR: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_RR);
    s << indent << "sensor_RL: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_RL);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ULTRASONIC_BUMPER_MESSAGE_ULTRASND_BUMP_RANGES_H
